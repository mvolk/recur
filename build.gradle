buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.9"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M2'
    }
}

apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8
def bootstrapClassPath = "${System.getenv()['JAVA_HOME']}/jre/lib/rt.jar"
project.tasks.withType(AbstractCompile, { AbstractCompile ac ->
    ac.options.bootClasspath = bootstrapClassPath
})

version = '0.1.0'

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.+'
    testCompile 'org.junit.platform:junit-platform-commons:1.0.0-M2'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0-M2'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.0-M2'
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs += '-parameters'
}

apply plugin: 'org.junit.platform.gradle.plugin'

apply plugin: 'checkstyle'
checkstyle {
    toolVersion = "6.18"
}
tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
    }
}

apply plugin: 'pmd'
pmd {
    sourceSets = [sourceSets.main, sourceSets.test]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("config/pmd/ruleset.xml")
    consoleOutput = true
    toolVersion = "5.4.1"
}

apply plugin: 'jacoco'
// The JUnit5Plugin registers the junitPlatformTest task after the project has been evaluated
//  so junitPlatformTest task cannot be configured until after evaluation of the project.
afterEvaluate {
    jacoco {
        toolVersion = "0.7.7.201606060606"
        applyTo junitPlatformTest
    }
    task junit5CodeCoverageReport(type:JacocoReport) {
        executionData junitPlatformTest
        sourceSets sourceSets.main
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        reports {
            xml.enabled = true
            html.enabled = true
            html.destination "$project.buildDir/reports/jacoco-html"
        }
    }
    check.dependsOn junit5CodeCoverageReport
}

apply plugin: "info.solidsoft.pitest"
pitest {
    targetClasses = ['com.ciderref.*']
    threads = 4
    outputFormats = ['XML', 'HTML']
}